actions_path("../actions")

desc "Set up BranchPluginExample"
lane :setup do
  setup_branch xcodeproj: "examples/BranchPluginExample/BranchPluginExample.xcodeproj"
end

desc "Set up BranchPluginExample and commit to Git"
lane :setup_and_commit do
  setup_branch xcodeproj: "examples/BranchPluginExample/BranchPluginExample.xcodeproj",
               commit: true
end

desc "Set up BranchPluginExampleObjc"
lane :setup_objc do
  setup_branch xcodeproj: "examples/BranchPluginExampleObjc/BranchPluginExampleObjc.xcodeproj"
end

desc "Set up BranchPluginExampleCarthage"
lane :setup_carthage do
  setup_branch xcodeproj: "examples/BranchPluginExampleCarthage/BranchPluginExampleCarthage.xcodeproj"
end

desc "Validate Universal Link settings for a project"
lane :validate do
  # The :domains parameter is optional.
  # Without it, validation passes if at least one domain exists in the project and
  # all domains pass validation.
  # With this parameter, the applinks: domains in the project must match this list.
  # Order is irrelevant.
  # This app is not currently set up properly for test in the Dashboard. Don't include
  # test domains in the project for now.
  validate_universal_links(
    domains: %w{
      k272.app.link
      k272-alternate.app.link
      k272.test-app.link
      k272-alternate.test-app.link
    },
    xcodeproj: "examples/BranchPluginExample/BranchPluginExample.xcodeproj"
  )
end

desc "Generate a brief project report"
lane :report do
  branch_report workspace: "examples/BranchPluginExample/BranchPluginExample.xcworkspace",
                header_only: true
end

desc "Update the README in this repo"
lane :readme do
  updated_dox = update_readme

  patch regexp: /(\<!-- BEGIN ACTION REFERENCE --\>).*(\<!-- END ACTION REFERENCE --\>)/m,
        text: "\\1\n#{updated_dox}\n\\2",
        mode: :replace,
        files: "README.md"

  update_action_docs
end
